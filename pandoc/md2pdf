#!/bin/sh

## Created by mics (https://github.com/michelou/) on December 2020.

##############################################################################
## Subroutines

getHome() {
    # local source="${BASH_SOURCE[0]}"
    local source="$0"
    while [[ -h "$source" ]] ; do
        local linked="$(readlink "$source")"
        local dir="$( cd -P $(dirname "$source") && cd -P $(dirname "$linked") && pwd )"
        source="$dir/$(basename "$linked")"
    done
    ( cd -P "$(dirname "$source")" && pwd )
}

getOS() {
    local os
    case "$(uname -s)" in
        Linux*)  os=Linux;;
        Darwin*) os=Mac;;
        CYGWIN*) os=Win;; # os=Cygwin;;
        MINGW*)  os=Win;; # os=MinGw;;
        *)       os=Unknown
    esac
    echo $os
}

getSubtitle() {
    local subtitle="Internal Draft"
    local hash=$GIT_HASH
    if $hash; then
        echo "$subtitle (rev ${hash:0:10})"
    else
        local git_url="https://github.com/lampepfl/dotty.git"
        local git=git$EXT
        local git_cmd="$(command -v $git)"
        if [[ -x "$git_cmd" ]]; then
            hash="$($git_cmd ls-remote $git_url master 2>/dev/null)"
        else
            git_cmd="$GIT_HOME/bin/$git"
            [[ -x "$git_cmd" ]] && hash="$($git_cmd ls-remote $git_url master 2>/dev/null)"
        fi
        $hash && echo "$subtitle (rev ${hash:0:10})" || echo "$subtitle"
    fi
}

##############################################################################
## Environment setup

PROG_HOME="$(getHome)"

OS="$(getOS)"
[[ $OS == "Unknown" ]] && { echo "Unsuppored OS" 1>&2; exit 1; }
[[ $OS == "Win" ]] && EXT=".exe" || EXT=""

PANDOC=pandoc$EXT
PANDOC_CMD="$(command -v $PANDOC)"
if ! [[ -x "$PANDOC_CMD" ]]; then
    case $OS in
        Win) PANDOC_CMD=$PANDOC_HOME/$PANDOC ;;
        *)   PANDOC_CMD=$PANDOC_HOME/bin/$PANDOC
    esac
    [[ -x "$PANDOC_CMD" ]] || { echo "$PANDOC executable not found" 1>&2; exit 1; }
fi

LATEX=lualatex$EXT
## We give priority to commands from the installation directory defined by TEXLIVE_HOME
if [[ -d "$TEXLIVE_HOME" ]]; then
    LATEX_CMD="$(find -v $TEXLIVE_HOME $LATEX)"
else
    LATEX_CMD="$(command -v $LATEX)"
fi
[[ -x "$LATEX_CMD" ]] || { echo "$LATEX executable not found" 1>&2; exit 1; }

SOURCE_DIR="$(dirname "$PROG_HOME")/docs/docs"
DATA_DIR="$PROG_HOME/data"
IMAGES_DIR="$DATA_DIR/images"
TARGET_DIR="$(dirname "$PROG_HOME")/out/pandoc"

DEBUG=0

if [[ $# -eq 0 ]]; then
    PROJECT_NAME=reference
	GIT_HASH=
else
    case $1 in
    internals) PROJECT_NAME=internals ;;
    reference) PROJECT_NAME=reference ;;
    usage)     PROJECT_NAME=usage ;;
    *)         echo "Unknown option \"$1\"" 1>&2; exit 1;
    esac
	GIT_HASH="$2"
fi
[[ -d "$SOURCE_DIR/$PROJECT_NAME" ]] || { echo "directory \"$PROJECT_NAME/\" not found" 1>&2; exit 1; }

OUTPUT_FILE="$TARGET_DIR/scala3_$PROJECT_NAME.pdf"

INPUT_FILE="$DATA_DIR/$PROJECT_NAME.md"
[[ -f "$INPUT_FILE" ]] || { echo "Main Markdown file not found" 1>&2; exit 1; }

DEFAULTS_FILE="$DATA_DIR/defaults.yaml"
[[ -f "$DEFAULTS_FILE" ]] || { echo "Pandoc defaults file not found" 1>&2; exit 1; }

TEMPLATE_FILE="$DATA_DIR/templates/template.tex"
[[ -f "$TEMPLATE_FILE" ]] || { echo "Pandoc template file not found" 1>&2; exit 1; }

SYNTAX_FILE="$DATA_DIR/templates/scala.xml"
[[ -f "$SYNTAX_FILE" ]] || { echo "Kate syntax file not found" 1>&2; exit 1; }

SUBTITLE="$(getSubtitle)"
TODAY="$(LC_ALL=en_US date +'%d %B %Y')"

## PANDOC_OPTS="--verbose"
PANDOC_OPTS="--quiet"
PANDOC_OPTS="$PANDOC_OPTS --data-dir=$DATA_DIR"
PANDOC_OPTS="$PANDOC_OPTS --defaults=$DEFAULTS_FILE"
PANDOC_OPTS="$PANDOC_OPTS --syntax-definition=$SYNTAX_FILE"
PANDOC_OPTS="$PANDOC_OPTS -V geometry=a4paper -V geometry:margin=30mm"
## DejaVuSerif font fails to display greek characters correctly (e.g. Î²-reduce) 
# PANDOC_OPTS="$PANDOC_OPTS -V mainfont:DejaVuSerif.ttf
# PANDOC_OPTS="$PANDOC_OPTS -V mainfont:FreeSerif.ttf"
# PANDOC_OPTS="$PANDOC_OPTS -V sansfont:DejaVuSans.ttf"
# PANDOC_OPTS="$PANDOC_OPTS -V monofont:DejaVuSansMono.ttf
# PANDOC_OPTS="$PANDOC_OPTS -V mathfont:texgyredejavu-math.otf"
PANDOC_OPTS="$PANDOC_OPTS -V fontsize=12pt"
## see https://www.htmlcsscolor.com/hex/66001E
PANDOC_OPTS="$PANDOC_OPTS -V urlcolor=blue -V linkcolor=[HTML]{66001E}"
PANDOC_OPTS="$PANDOC_OPTS -V subtitle='$SUBTITLE' -V date='$TODAY'"
PANDOC_OPTS="$PANDOC_OPTS --template=$TEMPLATE_FILE"
PANDOC_OPTS="$PANDOC_OPTS --pdf-engine=$LATEX_CMD"
PANDOC_OPTS="$PANDOC_OPTS --output=$OUTPUT_FILE"

$DEBUG && PANDOC_OPS="--verbose $PANDOC_OPTS" || PANDOC_OPTS="--quiet $PANDOC_OPTS"

##############################################################################
## Main

[[ -d "$TARGET_DIR" ]] || mkdir -p "$TARGET_DIR"

## copy image files to target directory
if [[ -d "$IMAGES_DIR" ]]; then
    TARGET_IMAGES_DIR="$TARGET_DIR/images"
    [[ -d "$TARGET_IMAGES_DIR" ]] || mkdir -p "$TARGET_IMAGES_DIR"
    $DEBUG && echo "Copy image files to directory \"${TARGET_IMAGES_DIR/$PROG_HOME\//}\"" 1>&2
    cp -r "$IMAGES_DIR" "$TARGET_DIR/"
    [[ $? -eq 0 ]] || { echo "Failed to copy image files to directory \"$TARGET_IMAGES_DIR\"" 1>&2; exit 1; }
fi

## transform anchors in Markdown files
SRC_DIR="$SOURCE_DIR/$PROJECT_NAME"
SRC_MANAGED_DIR="$TARGET_DIR/src_managed/$PROJECT_NAME"
[[ -d "$SRC_MANAGED_DIR" ]] || mkdir -p "$SRC_MANAGED_DIR"

MD_FILES="$(find "$SRC_DIR" -type f -name "*.md")"
for f in $MD_FILES; do
    IN_FILE="$f"
    OUT_FILE="${IN_FILE/$SRC_DIR/$SRC_MANAGED_DIR}"
    OUT_DIR="$(dirname $OUT_FILE)"
    [[ -d "$OUT_DIR" ]] || mkdir -p "$OUT_DIR"
    $DEBUG && echo "Preprocess file \"${IN_FILE/$PROG_HOME\//}\"" 1>&2
    ## We specifies 2 regexs in case another anchor exists on same line
    sed -e "s/\[\(.\+\)\](\(.*\/\)*\(.\+\)\.md)/[\1](#\3)/g" -e "s/\[\(.\+\)\](\(.*\/\)*\(.\+\)\.md)/[\1](#\3)/g" $IN_FILE > $OUT_FILE

    ## Markdown file contains image urls
    #if [[ "$OUT_FILE" =~ -nulls\.md$ ]]; then
    if [[ "$OUT_FILE" == *-nulls\.md* ]]; then
        TMP_FILE=$OUT_FILE.tmp
        cp "$OUT_FILE" "$TMP_FILE"
        $DEBUG && echo "Update file \"${OUT_FILE/$PROG_HOME\//}\"" 1>&2
        ## e.g. ![](../../../images/image.png "Image")
        sed "s/\!\[\(.*\)\](\(\.\.\/\)*\(.*\))/![\1](\.\.\/out\/pandoc\/\3)/g" $TMP_FILE > $OUT_FILE
    fi
done

$DEBUG && echo "$PANDOC_CMD $PANDOC_OPTS $INPUT_FILE" 1>&2
if [[ $OS == "Win" ]]; then
    ## direct call to Pandoc executable fails in Cygwin/MinGw
    eval "$PANDOC_CMD $PANDOC_OPTS $INPUT_FILE"
else
    eval "$PANDOC_CMD $PANDOC_OPTS $INPUT_FILE"
fi
[[ $? -eq 0 ]] || exit 1

exit 0
