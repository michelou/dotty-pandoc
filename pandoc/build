#!/usr/bin/env bash

## Created by mics (https://github.com/michelou/) on December 2020.

##############################################################################
## Subroutines

getHome() {
    local source="${BASH_SOURCE[0]}"
    while [ -h "$source" ] ; do
        local linked="$(readlink "$source")"
        local dir="$( cd -P $(dirname "$source") && cd -P $(dirname "$linked") && pwd )"
        source="$dir/$(basename "$linked")"
    done
    ( cd -P "$(dirname "$source")" && pwd )
}

getOS() {
    local os
    case "$(uname -s)" in
        Linux*)  os=Linux;;
        Darwin*) os=Mac;;
        CYGWIN*) os=Win;; # os=Cygwin;;
        MINGW*)  os=Win;; # os=MinGw;;
        *)       os=Unknown
    esac
    echo $os
}

# use variables EXITCODE, TIMER_START
cleanup() {
    [[ $1 =~ ^[0-1]$ ]] && EXITCODE=$1

    if $TIMER; then
        local timer_end=$(date +'%s')
        local duration=$((timer_end - TIMER_START))
        echo "Total elapsed time: $(date -d @$duration +'%H:%M:%S')" 1>&2
    fi
    debug "EXITCODE=$EXITCODE"
    exit $EXITCODE
}

verbose() {
    $VERBOSE && echo "$1" 1>&2
}

debug() {
    local debug_label="[46m[DEBUG][0m"
    $DEBUG && echo "$debug_label $1" 1>&2
}

error() {
    local error_label="[91mError:[0m"
    echo "$error_label $1" 1>&2
}

args() {
    PROJECT_NAME=$PROJECT_NAME_DEFAULT

    [[ $# -eq 0 ]] && HELP=true && return 1

    for arg in "$@"; do
        case "$arg" in
        ## options
        -debug)     DEBUG=true ;;
        -help)      HELP=true ;;
        -project:*) PROJECT_NAME="$(project_name ${arg:9})" ;;
        -timer)     TIMER=true ;;
        -verbose)   VERBOSE=true ;;
        -*)
            error "Unknown option $arg"
            EXITCODE=1 && return 0
            ;;
        ## subcommands
        clean)      CLEAN=true ;;
        compile)    COMPILE=true ;;
        help)       HELP=true ;;
        *)
           error "Error: Unknown subcommand $arg"
           EXITCODE=1 && return 0
           ;;
        esac
    done
    $CLEAN || $COMPILE || $HELP || HELP=true
    debug "Options    : DEBUG=$DEBUG TIMER=$TIMER VERBOSE=$VERBOSE"
    debug "Subcommands: CLEAN=$CLEAN COMPILE=$COMPILE HELP=$HELP"
    debug "Variables  : PANDOC_HOME=$PANDOC_HOME"
    debug "Variables  : TEXLIVE_HOME=$TEXLIVE_HOME"
    debug "Variables  : PROJECT_NAME=$PROJECT_NAME"
    # See http://www.cyberciti.biz/faq/linux-unix-formatting-dates-for-display/
    $TIMER && TIMER_START=$(date +"%s")
}

help() {
    cat << EOS
Usage: $BASENAME { <option> | <subcommand> }

  Options:
    -debug           show commands executed by this script
    -help            display this help message
    -project:<name>  project name (default: $PROJECT_NAME_DEFAULT)
    -timer           display total elapsed time
    -verbose         display progress messages

  Subcommands:
    clean            delete generated files
    help             display this help message
    compile          compile source files
EOS
}

project_name() {
    local name=""
    case "$1" in
    internals) name="internals" ;;
    reference) name="reference" ;;
    usage)     name="usage" ;;
    *)         error "Invalid project name $1"
    esac
    $name
}

clean() {
    if [ -d "$TARGET_DIR" ]; then
        debug "rm -rf $TARGET_DIR"
        verbose "Delete directory $TARGET_DIR"
        rm -rf "$TARGET_DIR"
        [[ $? -eq 0 ]] || ( EXITCODE=1 & return 0 )
    fi
}

compile() {
    [ -d "$TARGET_DIR" ] || mkdir -p "$TARGET_DIR"

    debug "$MD2PDF_CMD $PROJECT_NAME"
    verbose "$MD2PDF_CMD $PROJECT_NAME"
    $MD2PDF_CMD $PROJECT_NAME
    [[ $? -eq 0 ]] || ( EXITCODE=1 & return 0 )
}

##############################################################################
## Environment setup

BASENAME=$(basename "${BASH_SOURCE[0]}")

EXITCODE=0

PROG_HOME="$(getHome)"

OS="$(getOS)"
[ $OS == "Unknown" ] && error "Unsupported OS"
[ $OS == "Win" ] && EXT=".exe" || EXT=""

MD2PDF_CMD=$PROG_HOME/md2pdf
[ -x "$MD2PDF_CMD" ] || error "md2pdf script not found"

PROJECT_NAME_DEFAULT=reference

CLEAN=false
COMPILE=false
DEBUG=false
HELP=false
TIMER=false
VERBOSE=false

TARGET_DIR=$(dirname "$PROG_HOME")/out/pandoc

args "$@"
[[ $EXITCODE -eq 0 ]] || cleanup 1

##############################################################################
## Main

$HELP && help && cleanup

if $CLEAN; then
    clean || cleanup 1
fi
if $COMPILE; then
    compile || cleanup 1
fi

cleanup
